// Mocks generated by Mockito 5.4.6 from annotations
// in mindowl/test/usecase/user_logged_anonymously_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:mindowl/model/user.dart' as _i7;
import 'package:mindowl/repository/database/user_repository.dart' as _i6;
import 'package:mindowl/repository/service/auth_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i2.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get uid =>
      (super.noSuchMethod(
            Invocation.getter(#uid),
            returnValue: _i3.dummyValue<String>(this, Invocation.getter(#uid)),
          )
          as String);

  @override
  String get email =>
      (super.noSuchMethod(
            Invocation.getter(#email),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#email),
            ),
          )
          as String);

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  bool get isUserConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isUserConnected),
            returnValue: false,
          )
          as bool);

  @override
  _i4.Stream<String> get uidStream =>
      (super.noSuchMethod(
            Invocation.getter(#uidStream),
            returnValue: _i4.Stream<String>.empty(),
          )
          as _i4.Stream<String>);

  @override
  _i4.Stream<_i5.User?> get userAuthStream =>
      (super.noSuchMethod(
            Invocation.getter(#userAuthStream),
            returnValue: _i4.Stream<_i5.User?>.empty(),
          )
          as _i4.Stream<_i5.User?>);

  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setPersistence() =>
      (super.noSuchMethod(
            Invocation.method(#setPersistence, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> logInWithEmailPassword(String? email, String? pwd) =>
      (super.noSuchMethod(
            Invocation.method(#logInWithEmailPassword, [email, pwd]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> registerWithEmailPassword(String? email, String? pwd) =>
      (super.noSuchMethod(
            Invocation.method(#registerWithEmailPassword, [email, pwd]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> resetPassword(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#resetPassword, [email]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDisplayName(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#updateDisplayName, [name]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updatePassword(String? password) =>
      (super.noSuchMethod(
            Invocation.method(#updatePassword, [password]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> reauthenticateWithPassword(String? password) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithPassword, [password]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> loginUserAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#loginUserAnonymously, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signInWithCredential(_i5.AuthCredential? credential) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCredential, [credential]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> upgradeAnonymWithEmailPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#upgradeAnonymWithEmailPassword, [
              email,
              password,
            ]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [IUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRepository extends _i1.Mock implements _i6.IUserRepository {
  MockIUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i7.User> createUser(_i7.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [user]),
            returnValue: _i4.Future<_i7.User>.value(
              _i3.dummyValue<_i7.User>(
                this,
                Invocation.method(#createUser, [user]),
              ),
            ),
          )
          as _i4.Future<_i7.User>);

  @override
  _i4.Future<_i7.User?> getUser(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#getUser, [uid]),
            returnValue: _i4.Future<_i7.User?>.value(),
          )
          as _i4.Future<_i7.User?>);

  @override
  _i4.Future<void> updateUser(_i7.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteUser(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [uid]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> userExists(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#userExists, [uid]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Stream<_i7.User?> streamUser(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#streamUser, [uid]),
            returnValue: _i4.Stream<_i7.User?>.empty(),
          )
          as _i4.Stream<_i7.User?>);
}
